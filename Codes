from scipy.spatial import distance as dist
from imutils import face_utils
import imutils
import dlib
import cv2
import pygame
import threading
import time

# Initialize pygame mixer
pygame.mixer.init()

# Function to compute Eye Aspect Ratio (EAR)
def eye_aspect_ratio(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

# Function to play the alarm sound
def sound_alarm():
    pygame.mixer.music.load(r'C:\Users\anany\Downloads\BEEP_Train door beeps (ID 3343)_BSB.wav')
    pygame.mixer.music.play()

# Constants for Eye Aspect Ratio threshold and consecutive frames
EYE_AR_THRESH = 0.25
EYE_AR_CONSEC_FRAMES = 20

# Initializing counters and states
COUNTER = 0
ALARM_ON = False
BLINKS = 0
drowsy_start_time = None

print("[INFO] Loading predictor and detector...")
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(r'C:\Users\anany\Downloads\shape_predictor_68_face_landmarks.dat\shape_predictor_68_face_landmarks.dat')
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

print("[INFO] Starting video stream...")
vs = cv2.VideoCapture(0)

while True:
    ret, frame = vs.read()
    if not ret:
        break

    # Resize frame to make processing faster
    frame = imutils.resize(frame, width=600)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    rects = detector(gray, 0)

    # Loop over the detected faces
    for rect in rects:
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)

        # Extract left and right eye landmarks
        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        
        # Compute the Eye Aspect Ratio for both eyes
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)
        ear = (leftEAR + rightEAR) / 2.0

        # Check if EAR is below the threshold (indicating drowsiness)
        if ear < EYE_AR_THRESH:
            COUNTER += 1

            if COUNTER >= EYE_AR_CONSEC_FRAMES:
                if not ALARM_ON:
                    ALARM_ON = True
                    drowsy_start_time = time.time()
                    threading.Thread(target=sound_alarm, daemon=True).start()

                # Display drowsiness alert
                cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                cv2.rectangle(frame, (0, 0), (frame.shape[1], frame.shape[0]), (0, 0, 255), 4)
        else:
            if COUNTER >= 2 and COUNTER < EYE_AR_CONSEC_FRAMES:
                BLINKS += 1

            COUNTER = 0
            if ALARM_ON:
                # Calculate drowsiness duration
                drowsy_duration = time.time() - drowsy_start_time
                print(f"[INFO] Drowsiness lasted for {drowsy_duration:.2f} seconds")
            ALARM_ON = False

        # Display EAR and Blink count on the frame
        cv2.putText(frame, "EAR: {:.2f}".format(ear), (10, 350),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(frame, f"Blinks: {BLINKS}", (10, 380),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)

        # Draw contours around the eyes
        cv2.drawContours(frame, [cv2.convexHull(leftEye)], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [cv2.convexHull(rightEye)], -1, (0, 255, 0), 1)

    # Display the resulting frame
    cv2.imshow("Drowsiness Detector", frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Release the video capture and close all OpenCV windows
vs.release()
cv2.destroyAllWindows()
